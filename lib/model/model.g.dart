// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Skill.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Skill TABLE
class TableSkill extends SqfEntityTableBase {
  TableSkill() {
    // declare properties of EntityTable
    tableName = 'Skill';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('description', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSkill();
  }
}

// SelectedSkill TABLE
class TableSelectedSkill extends SqfEntityTableBase {
  TableSelectedSkill() {
    // declare properties of EntityTable
    tableName = 'SelectedSkill';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(TableSkill.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'SkillId'),
      SqfEntityFieldBase('active', DbType.bool,
          defaultValue: true, isNotNull: true),
      SqfEntityFieldBase('stresslevel_min', DbType.integer),
      SqfEntityFieldBase('stresslevel_max', DbType.integer),
      SqfEntityFieldBase('moodlevel_min', DbType.integer),
      SqfEntityFieldBase('moodlevel_max', DbType.integer),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSelectedSkill();
  }
}

// SkillUse TABLE
class TableSkillUse extends SqfEntityTableBase {
  TableSkillUse() {
    // declare properties of EntityTable
    tableName = 'SkillUse';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(TableSkill.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'SkillId',
          isNotNull: true),
      SqfEntityFieldBase('useDateTime', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldRelationshipBase(
          TableMoodEntry.getInstance, DeleteRule.NO_ACTION,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'MoodEntryId'),
      SqfEntityFieldRelationshipBase(
          TableEffectivenes.getInstance, DeleteRule.NO_ACTION,
          relationType: RelationType.ONE_TO_MANY, fieldName: 'EffectivenessId'),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableSkillUse();
  }
}

// Effectivenes TABLE
class TableEffectivenes extends SqfEntityTableBase {
  TableEffectivenes() {
    // declare properties of EntityTable
    tableName = 'Effectiveness';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('description', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableEffectivenes();
  }
}

// MoodDiaryEntry TABLE
class TableMoodDiaryEntry extends SqfEntityTableBase {
  TableMoodDiaryEntry() {
    // declare properties of EntityTable
    tableName = 'MoodDiaryEntry';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('activity', DbType.text),
      SqfEntityFieldBase('mood', DbType.text),
      SqfEntityFieldBase('thoughts', DbType.text),
      SqfEntityFieldBase('rating', DbType.integer),
      SqfEntityFieldBase('dateTime', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableMoodDiaryEntry();
  }
}

// MoodEntry TABLE
class TableMoodEntry extends SqfEntityTableBase {
  TableMoodEntry() {
    // declare properties of EntityTable
    tableName = 'MoodEntry';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('stresslevel', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('mood', DbType.integer),
      SqfEntityFieldBase('dateTime', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('activity', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableMoodEntry();
  }
}

// MoodWithDiaryEntry TABLE
class TableMoodWithDiaryEntry extends SqfEntityTableBase {
  TableMoodWithDiaryEntry() {
    // declare properties of EntityTable
    tableName = 'MoodWithDiaryEntry';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('moodId', DbType.integer),
      SqfEntityFieldBase('diaryId', DbType.integer),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableMoodWithDiaryEntry();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class MyDbModel extends SqfEntityModelProvider {
  MyDbModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableSkill.getInstance,
      TableSelectedSkill.getInstance,
      TableSkillUse.getInstance,
      TableEffectivenes.getInstance,
      TableMoodDiaryEntry.getInstance,
      TableMoodEntry.getInstance,
      TableMoodWithDiaryEntry.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Skill
class Skill extends TableBase {
  Skill({this.id, this.name, this.description}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Skill.withFields(this.name, this.description) {
    _setDefaultValues();
  }
  Skill.withId(this.id, this.name, this.description) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Skill.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['description'] != null) {
      description = o['description'].toString();
    }
  }
  // FIELDS (Skill)
  int? id;
  String? name;
  String? description;

  // end FIELDS (Skill)

// COLLECTIONS & VIRTUALS (Skill)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSelectedSkills', 'plField2'..]) or so on..
  List<SelectedSkill>? plSelectedSkills;

  /// get SelectedSkill(s) filtered by id=SkillId
  SelectedSkillFilterBuilder? getSelectedSkills(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return SelectedSkill()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .SkillId
        .equals(id)
        .and;
  }

  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSkillUses', 'plField2'..]) or so on..
  List<SkillUse>? plSkillUses;

  /// get SkillUse(s) filtered by id=SkillId
  SkillUseFilterBuilder? getSkillUses(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return SkillUse()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .SkillId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Skill)

  static const bool _softDeleteActivated = false;
  SkillManager? __mnSkill;

  SkillManager get _mnSkill {
    return __mnSkill = __mnSkill ?? SkillManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }

// COLLECTIONS (Skill)
    if (!forQuery) {
      map['SelectedSkills'] = await getSelectedSkills()!.toMapList();
    }
    if (!forQuery) {
      map['SkillUses'] = await getSkillUses()!.toMapList();
    }
// END COLLECTIONS (Skill)

    return map;
  }

  /// This method returns Json String [Skill]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Skill]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name, description];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name, description];
  }

  static Future<List<Skill>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Skill.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Skill>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Skill>[];
    try {
      objList = list
          .map((skill) => Skill.fromMap(skill as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Skill.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Skill>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Skill> objList = <Skill>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Skill.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('Skill.plSelectedSkills') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSelectedSkills'))) {
          /*_loadedfields!.add('Skill.plSelectedSkills'); */ obj
                  .plSelectedSkills =
              obj.plSelectedSkills ??
                  await obj.getSelectedSkills()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('Skill.plSkillUses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSkillUses'))) {
          /*_loadedfields!.add('Skill.plSkillUses'); */ obj.plSkillUses =
              obj.plSkillUses ??
                  await obj.getSkillUses()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Skill by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Skill] if exist, otherwise returns null
  Future<Skill?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Skill? obj;
    final data = await _mnSkill.getById([id]);
    if (data.length != 0) {
      obj = Skill.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('Skill.plSelectedSkills') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSelectedSkills'))) {
          /*_loadedfields!.add('Skill.plSelectedSkills'); */ obj
                  .plSelectedSkills =
              obj.plSelectedSkills ??
                  await obj.getSelectedSkills()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('Skill.plSkillUses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSkillUses'))) {
          /*_loadedfields!.add('Skill.plSkillUses'); */ obj.plSkillUses =
              obj.plSkillUses ??
                  await obj.getSkillUses()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Skill) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSkill.insert(this, ignoreBatch);
    } else {
      await _mnSkill.update(this);
    }

    return id;
  }

  /// Saves the (Skill) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSkill.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnSkill.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Skill. Returns a new Primary Key value of Skill

  /// <returns>Returns a new Primary Key value of Skill
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Skill> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Skill> skills) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in skills) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit();
      for (int i = 0; i < skills.length; i++) {
        if (skills[i].id == null) {
          skills[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSkill.rawInsert(
          'INSERT OR REPLACE INTO Skill (id, name, description)  VALUES (?,?,?)',
          [id, name, description],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true, successMessage: 'Skill id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Skill id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Skill Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Skill>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Skill> skills) async {
    final results = await _mnSkill.rawInsertAll(
        'INSERT OR REPLACE INTO Skill (id, name, description)  VALUES (?,?,?)',
        skills);
    return results;
  }

  /// Deletes Skill

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Skill invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result = await SelectedSkill()
          .select()
          .SkillId
          .equals(id)
          .and
          .delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    {
      result =
          await SkillUse().select().SkillId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnSkill
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnSkill.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Skill] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  SkillFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SkillFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  SkillFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SkillFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion skill

// region SkillField
class SkillField extends FilterBase {
  SkillField(SkillFilterBuilder skillFB) : super(skillFB);

  @override
  SkillFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as SkillFilterBuilder;
  }

  @override
  SkillFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as SkillFilterBuilder;
  }

  @override
  SkillFilterBuilder isNull() {
    return super.isNull() as SkillFilterBuilder;
  }

  @override
  SkillFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as SkillFilterBuilder;
  }

  @override
  SkillFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as SkillFilterBuilder;
  }

  @override
  SkillFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as SkillFilterBuilder;
  }

  @override
  SkillFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as SkillFilterBuilder;
  }

  @override
  SkillFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as SkillFilterBuilder;
  }

  @override
  SkillFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as SkillFilterBuilder;
  }

  @override
  SkillFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as SkillFilterBuilder;
  }

  @override
  SkillFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as SkillFilterBuilder;
  }

  @override
  SkillFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as SkillFilterBuilder;
  }

  @override
  SkillField get not {
    return super.not as SkillField;
  }
}
// endregion SkillField

// region SkillFilterBuilder
class SkillFilterBuilder extends ConjunctionBase {
  SkillFilterBuilder(Skill obj, bool? getIsDeleted) : super(obj, getIsDeleted) {
    _mnSkill = obj._mnSkill;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  SkillManager? _mnSkill;

  /// put the sql keyword 'AND'
  @override
  SkillFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  SkillFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  SkillFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  SkillFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  SkillFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  SkillFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  SkillFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SkillFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SkillFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SkillFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SkillFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  SkillField _setField(SkillField? field, String colName, DbType dbtype) {
    return SkillField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  SkillField? _id;
  SkillField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  SkillField? _name;
  SkillField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  SkillField? _description;
  SkillField get description {
    return _description = _setField(_description, 'description', DbType.text);
  }

  /// Deletes List<Skill> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (SelectedSkill) according to DeleteRule.CASCADE
    final idListSelectedSkillBYSkillId = toListPrimaryKeySQL(false);
    final resSelectedSkillBYSkillId = await SelectedSkill()
        .select()
        .where('SkillId IN (${idListSelectedSkillBYSkillId['sql']})',
            parameterValue: idListSelectedSkillBYSkillId['args'])
        .delete(hardDelete);
    if (!resSelectedSkillBYSkillId.success) {
      return resSelectedSkillBYSkillId;
    }
// Delete sub records where in (SkillUse) according to DeleteRule.CASCADE
    final idListSkillUseBYSkillId = toListPrimaryKeySQL(false);
    final resSkillUseBYSkillId = await SkillUse()
        .select()
        .where('SkillId IN (${idListSkillUseBYSkillId['sql']})',
            parameterValue: idListSkillUseBYSkillId['args'])
        .delete(hardDelete);
    if (!resSkillUseBYSkillId.success) {
      return resSkillUseBYSkillId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSkill!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSkill!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from Skill ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSkill!.updateBatch(qparams, values);
  }

  /// This method always returns [Skill] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Skill?
  @override
  Future<Skill?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSkill!.toList(qparams);
    final data = await objFuture;
    Skill? obj;
    if (data.isNotEmpty) {
      obj = Skill.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('Skill.plSelectedSkills') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSelectedSkills'))) {
          /*_loadedfields!.add('Skill.plSelectedSkills'); */ obj
                  .plSelectedSkills =
              obj.plSelectedSkills ??
                  await obj.getSelectedSkills()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
        if (/*!_loadedfields!.contains('Skill.plSkillUses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSkillUses'))) {
          /*_loadedfields!.add('Skill.plSkillUses'); */ obj.plSkillUses =
              obj.plSkillUses ??
                  await obj.getSkillUses()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Skill]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Skill?
  @override
  Future<Skill> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Skill();
  }

  /// This method returns int. [Skill]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? skillCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final skillsFuture = await _mnSkill!.toList(qparams);
    final int count = skillsFuture[0]['CNT'] as int;
    if (skillCount != null) {
      skillCount(count);
    }
    return count;
  }

  /// This method returns List<Skill> [Skill]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Skill>
  @override
  Future<List<Skill>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Skill> skillsData = await Skill.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return skillsData;
  }

  /// This method returns Json String [Skill]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Skill]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Skill]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSkill!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Skill]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM Skill WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnSkill!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Skill]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSkill!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Skill.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSkill!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion SkillFilterBuilder

// region SkillFields
class SkillFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }
}
// endregion SkillFields

//region SkillManager
class SkillManager extends SqfEntityProvider {
  SkillManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'Skill';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion SkillManager
// region SelectedSkill
class SelectedSkill extends TableBase {
  SelectedSkill(
      {this.id,
      this.SkillId,
      this.active,
      this.stresslevel_min,
      this.stresslevel_max,
      this.moodlevel_min,
      this.moodlevel_max}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  SelectedSkill.withFields(this.SkillId, this.active, this.stresslevel_min,
      this.stresslevel_max, this.moodlevel_min, this.moodlevel_max) {
    _setDefaultValues();
  }
  SelectedSkill.withId(this.id, this.SkillId, this.active, this.stresslevel_min,
      this.stresslevel_max, this.moodlevel_min, this.moodlevel_max) {
    _setDefaultValues();
  }
  // fromMap v2.0
  SelectedSkill.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    SkillId = int.tryParse(o['SkillId'].toString());

    if (o['active'] != null) {
      active =
          o['active'].toString() == '1' || o['active'].toString() == 'true';
    }
    if (o['stresslevel_min'] != null) {
      stresslevel_min = int.tryParse(o['stresslevel_min'].toString());
    }
    if (o['stresslevel_max'] != null) {
      stresslevel_max = int.tryParse(o['stresslevel_max'].toString());
    }
    if (o['moodlevel_min'] != null) {
      moodlevel_min = int.tryParse(o['moodlevel_min'].toString());
    }
    if (o['moodlevel_max'] != null) {
      moodlevel_max = int.tryParse(o['moodlevel_max'].toString());
    }

    // RELATIONSHIPS FromMAP
    plSkill = o['skill'] != null
        ? Skill.fromMap(o['skill'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (SelectedSkill)
  int? id;
  int? SkillId;
  bool? active;
  int? stresslevel_min;
  int? stresslevel_max;
  int? moodlevel_min;
  int? moodlevel_max;

  // end FIELDS (SelectedSkill)

// RELATIONSHIPS (SelectedSkill)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSkill', 'plField2'..]) or so on..
  Skill? plSkill;

  /// get Skill By SkillId
  Future<Skill?> getSkill(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Skill()
        .getById(SkillId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (SelectedSkill)

  static const bool _softDeleteActivated = false;
  SelectedSkillManager? __mnSelectedSkill;

  SelectedSkillManager get _mnSelectedSkill {
    return __mnSelectedSkill = __mnSelectedSkill ?? SelectedSkillManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (SkillId != null) {
      map['SkillId'] = forView
          ? plSkill == null
              ? SkillId
              : plSkill!.name
          : SkillId;
    } else if (SkillId != null || !forView) {
      map['SkillId'] = null;
    }
    if (active != null) {
      map['active'] = forQuery ? (active! ? 1 : 0) : active;
    } else if (active != null || !forView) {
      map['active'] = null;
    }
    if (stresslevel_min != null || !forView) {
      map['stresslevel_min'] = stresslevel_min;
    }
    if (stresslevel_max != null || !forView) {
      map['stresslevel_max'] = stresslevel_max;
    }
    if (moodlevel_min != null || !forView) {
      map['moodlevel_min'] = moodlevel_min;
    }
    if (moodlevel_max != null || !forView) {
      map['moodlevel_max'] = moodlevel_max;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (SkillId != null) {
      map['SkillId'] = forView
          ? plSkill == null
              ? SkillId
              : plSkill!.name
          : SkillId;
    } else if (SkillId != null || !forView) {
      map['SkillId'] = null;
    }
    if (active != null) {
      map['active'] = forQuery ? (active! ? 1 : 0) : active;
    } else if (active != null || !forView) {
      map['active'] = null;
    }
    if (stresslevel_min != null || !forView) {
      map['stresslevel_min'] = stresslevel_min;
    }
    if (stresslevel_max != null || !forView) {
      map['stresslevel_max'] = stresslevel_max;
    }
    if (moodlevel_min != null || !forView) {
      map['moodlevel_min'] = moodlevel_min;
    }
    if (moodlevel_max != null || !forView) {
      map['moodlevel_max'] = moodlevel_max;
    }

    return map;
  }

  /// This method returns Json String [SelectedSkill]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [SelectedSkill]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      SkillId,
      active,
      stresslevel_min,
      stresslevel_max,
      moodlevel_min,
      moodlevel_max
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      SkillId,
      active,
      stresslevel_min,
      stresslevel_max,
      moodlevel_min,
      moodlevel_max
    ];
  }

  static Future<List<SelectedSkill>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR SelectedSkill.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<SelectedSkill>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <SelectedSkill>[];
    try {
      objList = list
          .map((selectedskill) =>
              SelectedSkill.fromMap(selectedskill as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR SelectedSkill.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<SelectedSkill>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<SelectedSkill> objList = <SelectedSkill>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = SelectedSkill.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSkill'))) {
          obj.plSkill =
              obj.plSkill ?? await obj.getSkill(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns SelectedSkill by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [SelectedSkill] if exist, otherwise returns null
  Future<SelectedSkill?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    SelectedSkill? obj;
    final data = await _mnSelectedSkill.getById([id]);
    if (data.length != 0) {
      obj = SelectedSkill.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSkill'))) {
          obj.plSkill =
              obj.plSkill ?? await obj.getSkill(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (SelectedSkill) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSelectedSkill.insert(this, ignoreBatch);
    } else {
      await _mnSelectedSkill.update(this);
    }

    return id;
  }

  /// Saves the (SelectedSkill) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSelectedSkill.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnSelectedSkill.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs SelectedSkill. Returns a new Primary Key value of SelectedSkill

  /// <returns>Returns a new Primary Key value of SelectedSkill
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<SelectedSkill> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<SelectedSkill> selectedskills) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in selectedskills) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit();
      for (int i = 0; i < selectedskills.length; i++) {
        if (selectedskills[i].id == null) {
          selectedskills[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSelectedSkill.rawInsert(
          'INSERT OR REPLACE INTO SelectedSkill (id, SkillId, active, stresslevel_min, stresslevel_max, moodlevel_min, moodlevel_max)  VALUES (?,?,?,?,?,?,?)',
          [
            id,
            SkillId,
            active,
            stresslevel_min,
            stresslevel_max,
            moodlevel_min,
            moodlevel_max
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'SelectedSkill id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'SelectedSkill id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'SelectedSkill Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<SelectedSkill>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<SelectedSkill> selectedskills) async {
    final results = await _mnSelectedSkill.rawInsertAll(
        'INSERT OR REPLACE INTO SelectedSkill (id, SkillId, active, stresslevel_min, stresslevel_max, moodlevel_min, moodlevel_max)  VALUES (?,?,?,?,?,?,?)',
        selectedskills);
    return results;
  }

  /// Deletes SelectedSkill

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete SelectedSkill invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnSelectedSkill
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnSelectedSkill.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [SelectedSkill] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  SelectedSkillFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SelectedSkillFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  SelectedSkillFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SelectedSkillFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    active = active ?? true;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion selectedskill

// region SelectedSkillField
class SelectedSkillField extends FilterBase {
  SelectedSkillField(SelectedSkillFilterBuilder selectedskillFB)
      : super(selectedskillFB);

  @override
  SelectedSkillFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as SelectedSkillFilterBuilder;
  }

  @override
  SelectedSkillFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as SelectedSkillFilterBuilder;
  }

  @override
  SelectedSkillFilterBuilder isNull() {
    return super.isNull() as SelectedSkillFilterBuilder;
  }

  @override
  SelectedSkillFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as SelectedSkillFilterBuilder;
  }

  @override
  SelectedSkillFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as SelectedSkillFilterBuilder;
  }

  @override
  SelectedSkillFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as SelectedSkillFilterBuilder;
  }

  @override
  SelectedSkillFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as SelectedSkillFilterBuilder;
  }

  @override
  SelectedSkillFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as SelectedSkillFilterBuilder;
  }

  @override
  SelectedSkillFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as SelectedSkillFilterBuilder;
  }

  @override
  SelectedSkillFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as SelectedSkillFilterBuilder;
  }

  @override
  SelectedSkillFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as SelectedSkillFilterBuilder;
  }

  @override
  SelectedSkillFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as SelectedSkillFilterBuilder;
  }

  @override
  SelectedSkillField get not {
    return super.not as SelectedSkillField;
  }
}
// endregion SelectedSkillField

// region SelectedSkillFilterBuilder
class SelectedSkillFilterBuilder extends ConjunctionBase {
  SelectedSkillFilterBuilder(SelectedSkill obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnSelectedSkill = obj._mnSelectedSkill;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  SelectedSkillManager? _mnSelectedSkill;

  /// put the sql keyword 'AND'
  @override
  SelectedSkillFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  SelectedSkillFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  SelectedSkillFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  SelectedSkillFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  SelectedSkillFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  SelectedSkillFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  SelectedSkillFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SelectedSkillFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SelectedSkillFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SelectedSkillFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SelectedSkillFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  SelectedSkillField _setField(
      SelectedSkillField? field, String colName, DbType dbtype) {
    return SelectedSkillField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  SelectedSkillField? _id;
  SelectedSkillField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  SelectedSkillField? _SkillId;
  SelectedSkillField get SkillId {
    return _SkillId = _setField(_SkillId, 'SkillId', DbType.integer);
  }

  SelectedSkillField? _active;
  SelectedSkillField get active {
    return _active = _setField(_active, 'active', DbType.bool);
  }

  SelectedSkillField? _stresslevel_min;
  SelectedSkillField get stresslevel_min {
    return _stresslevel_min =
        _setField(_stresslevel_min, 'stresslevel_min', DbType.integer);
  }

  SelectedSkillField? _stresslevel_max;
  SelectedSkillField get stresslevel_max {
    return _stresslevel_max =
        _setField(_stresslevel_max, 'stresslevel_max', DbType.integer);
  }

  SelectedSkillField? _moodlevel_min;
  SelectedSkillField get moodlevel_min {
    return _moodlevel_min =
        _setField(_moodlevel_min, 'moodlevel_min', DbType.integer);
  }

  SelectedSkillField? _moodlevel_max;
  SelectedSkillField get moodlevel_max {
    return _moodlevel_max =
        _setField(_moodlevel_max, 'moodlevel_max', DbType.integer);
  }

  /// Deletes List<SelectedSkill> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSelectedSkill!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSelectedSkill!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from SelectedSkill ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSelectedSkill!.updateBatch(qparams, values);
  }

  /// This method always returns [SelectedSkill] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> SelectedSkill?
  @override
  Future<SelectedSkill?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSelectedSkill!.toList(qparams);
    final data = await objFuture;
    SelectedSkill? obj;
    if (data.isNotEmpty) {
      obj = SelectedSkill.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSkill'))) {
          obj.plSkill =
              obj.plSkill ?? await obj.getSkill(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [SelectedSkill]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> SelectedSkill?
  @override
  Future<SelectedSkill> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        SelectedSkill();
  }

  /// This method returns int. [SelectedSkill]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? selectedskillCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final selectedskillsFuture = await _mnSelectedSkill!.toList(qparams);
    final int count = selectedskillsFuture[0]['CNT'] as int;
    if (selectedskillCount != null) {
      selectedskillCount(count);
    }
    return count;
  }

  /// This method returns List<SelectedSkill> [SelectedSkill]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<SelectedSkill>
  @override
  Future<List<SelectedSkill>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<SelectedSkill> selectedskillsData =
        await SelectedSkill.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return selectedskillsData;
  }

  /// This method returns Json String [SelectedSkill]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [SelectedSkill]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [SelectedSkill]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSelectedSkill!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [SelectedSkill]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM SelectedSkill WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnSelectedSkill!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [SelectedSkill]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSelectedSkill!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await SelectedSkill.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSelectedSkill!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion SelectedSkillFilterBuilder

// region SelectedSkillFields
class SelectedSkillFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fSkillId;
  static TableField get SkillId {
    return _fSkillId =
        _fSkillId ?? SqlSyntax.setField(_fSkillId, 'SkillId', DbType.integer);
  }

  static TableField? _fActive;
  static TableField get active {
    return _fActive =
        _fActive ?? SqlSyntax.setField(_fActive, 'active', DbType.bool);
  }

  static TableField? _fStresslevel_min;
  static TableField get stresslevel_min {
    return _fStresslevel_min = _fStresslevel_min ??
        SqlSyntax.setField(
            _fStresslevel_min, 'stresslevel_min', DbType.integer);
  }

  static TableField? _fStresslevel_max;
  static TableField get stresslevel_max {
    return _fStresslevel_max = _fStresslevel_max ??
        SqlSyntax.setField(
            _fStresslevel_max, 'stresslevel_max', DbType.integer);
  }

  static TableField? _fMoodlevel_min;
  static TableField get moodlevel_min {
    return _fMoodlevel_min = _fMoodlevel_min ??
        SqlSyntax.setField(_fMoodlevel_min, 'moodlevel_min', DbType.integer);
  }

  static TableField? _fMoodlevel_max;
  static TableField get moodlevel_max {
    return _fMoodlevel_max = _fMoodlevel_max ??
        SqlSyntax.setField(_fMoodlevel_max, 'moodlevel_max', DbType.integer);
  }
}
// endregion SelectedSkillFields

//region SelectedSkillManager
class SelectedSkillManager extends SqfEntityProvider {
  SelectedSkillManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'SelectedSkill';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion SelectedSkillManager
// region SkillUse
class SkillUse extends TableBase {
  SkillUse(
      {this.id,
      this.SkillId,
      this.useDateTime,
      this.MoodEntryId,
      this.EffectivenessId}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  SkillUse.withFields(
      this.SkillId, this.useDateTime, this.MoodEntryId, this.EffectivenessId) {
    _setDefaultValues();
  }
  SkillUse.withId(this.id, this.SkillId, this.useDateTime, this.MoodEntryId,
      this.EffectivenessId) {
    _setDefaultValues();
  }
  // fromMap v2.0
  SkillUse.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    SkillId = int.tryParse(o['SkillId'].toString());

    if (o['useDateTime'] != null) {
      useDateTime = int.tryParse(o['useDateTime'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['useDateTime'].toString())!)
          : DateTime.tryParse(o['useDateTime'].toString());
    }
    MoodEntryId = int.tryParse(o['MoodEntryId'].toString());

    EffectivenessId = int.tryParse(o['EffectivenessId'].toString());

    // RELATIONSHIPS FromMAP
    plSkill = o['skill'] != null
        ? Skill.fromMap(o['skill'] as Map<String, dynamic>)
        : null;
    plMoodEntry = o['moodEntry'] != null
        ? MoodEntry.fromMap(o['moodEntry'] as Map<String, dynamic>)
        : null;
    plEffectivenes = o['effectivenes'] != null
        ? Effectivenes.fromMap(o['effectivenes'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (SkillUse)
  int? id;
  int? SkillId;
  DateTime? useDateTime;
  int? MoodEntryId;
  int? EffectivenessId;

  // end FIELDS (SkillUse)

// RELATIONSHIPS (SkillUse)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSkill', 'plField2'..]) or so on..
  Skill? plSkill;

  /// get Skill By SkillId
  Future<Skill?> getSkill(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Skill()
        .getById(SkillId, loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plMoodEntry', 'plField2'..]) or so on..
  MoodEntry? plMoodEntry;

  /// get MoodEntry By MoodEntryId
  Future<MoodEntry?> getMoodEntry(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await MoodEntry().getById(MoodEntryId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }

  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plEffectivenes', 'plField2'..]) or so on..
  Effectivenes? plEffectivenes;

  /// get Effectivenes By EffectivenessId
  Future<Effectivenes?> getEffectivenes(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Effectivenes().getById(EffectivenessId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (SkillUse)

  static const bool _softDeleteActivated = false;
  SkillUseManager? __mnSkillUse;

  SkillUseManager get _mnSkillUse {
    return __mnSkillUse = __mnSkillUse ?? SkillUseManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (SkillId != null) {
      map['SkillId'] = forView
          ? plSkill == null
              ? SkillId
              : plSkill!.name
          : SkillId;
    } else if (SkillId != null || !forView) {
      map['SkillId'] = null;
    }
    if (useDateTime != null) {
      map['useDateTime'] = forJson
          ? useDateTime!.toString()
          : forQuery
              ? useDateTime!.millisecondsSinceEpoch
              : useDateTime;
    } else if (useDateTime != null || !forView) {
      map['useDateTime'] = null;
    }
    if (MoodEntryId != null) {
      map['MoodEntryId'] = forView
          ? plMoodEntry == null
              ? MoodEntryId
              : plMoodEntry!.activity
          : MoodEntryId;
    } else if (MoodEntryId != null || !forView) {
      map['MoodEntryId'] = null;
    }
    if (EffectivenessId != null) {
      map['EffectivenessId'] = forView
          ? plEffectivenes == null
              ? EffectivenessId
              : plEffectivenes!.description
          : EffectivenessId;
    } else if (EffectivenessId != null || !forView) {
      map['EffectivenessId'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (SkillId != null) {
      map['SkillId'] = forView
          ? plSkill == null
              ? SkillId
              : plSkill!.name
          : SkillId;
    } else if (SkillId != null || !forView) {
      map['SkillId'] = null;
    }
    if (useDateTime != null) {
      map['useDateTime'] = forJson
          ? useDateTime!.toString()
          : forQuery
              ? useDateTime!.millisecondsSinceEpoch
              : useDateTime;
    } else if (useDateTime != null || !forView) {
      map['useDateTime'] = null;
    }
    if (MoodEntryId != null) {
      map['MoodEntryId'] = forView
          ? plMoodEntry == null
              ? MoodEntryId
              : plMoodEntry!.activity
          : MoodEntryId;
    } else if (MoodEntryId != null || !forView) {
      map['MoodEntryId'] = null;
    }
    if (EffectivenessId != null) {
      map['EffectivenessId'] = forView
          ? plEffectivenes == null
              ? EffectivenessId
              : plEffectivenes!.description
          : EffectivenessId;
    } else if (EffectivenessId != null || !forView) {
      map['EffectivenessId'] = null;
    }

    return map;
  }

  /// This method returns Json String [SkillUse]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [SkillUse]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      SkillId,
      useDateTime != null ? useDateTime!.millisecondsSinceEpoch : null,
      MoodEntryId,
      EffectivenessId
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      SkillId,
      useDateTime != null ? useDateTime!.millisecondsSinceEpoch : null,
      MoodEntryId,
      EffectivenessId
    ];
  }

  static Future<List<SkillUse>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR SkillUse.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<SkillUse>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <SkillUse>[];
    try {
      objList = list
          .map((skilluse) => SkillUse.fromMap(skilluse as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR SkillUse.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<SkillUse>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<SkillUse> objList = <SkillUse>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = SkillUse.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSkill'))) {
          obj.plSkill =
              obj.plSkill ?? await obj.getSkill(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plMoodEntry'))) {
          obj.plMoodEntry = obj.plMoodEntry ??
              await obj.getMoodEntry(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plEffectivenes'))) {
          obj.plEffectivenes = obj.plEffectivenes ??
              await obj.getEffectivenes(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns SkillUse by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [SkillUse] if exist, otherwise returns null
  Future<SkillUse?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    SkillUse? obj;
    final data = await _mnSkillUse.getById([id]);
    if (data.length != 0) {
      obj = SkillUse.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSkill'))) {
          obj.plSkill =
              obj.plSkill ?? await obj.getSkill(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plMoodEntry'))) {
          obj.plMoodEntry = obj.plMoodEntry ??
              await obj.getMoodEntry(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plEffectivenes'))) {
          obj.plEffectivenes = obj.plEffectivenes ??
              await obj.getEffectivenes(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (SkillUse) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSkillUse.insert(this, ignoreBatch);
    } else {
      await _mnSkillUse.update(this);
    }

    return id;
  }

  /// Saves the (SkillUse) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnSkillUse.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnSkillUse.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs SkillUse. Returns a new Primary Key value of SkillUse

  /// <returns>Returns a new Primary Key value of SkillUse
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<SkillUse> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<SkillUse> skilluses) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in skilluses) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit();
      for (int i = 0; i < skilluses.length; i++) {
        if (skilluses[i].id == null) {
          skilluses[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnSkillUse.rawInsert(
          'INSERT OR REPLACE INTO SkillUse (id, SkillId, useDateTime, MoodEntryId, EffectivenessId)  VALUES (?,?,?,?,?)',
          [
            id,
            SkillId,
            useDateTime != null ? useDateTime!.millisecondsSinceEpoch : null,
            MoodEntryId,
            EffectivenessId
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'SkillUse id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'SkillUse id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'SkillUse Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<SkillUse>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<SkillUse> skilluses) async {
    final results = await _mnSkillUse.rawInsertAll(
        'INSERT OR REPLACE INTO SkillUse (id, SkillId, useDateTime, MoodEntryId, EffectivenessId)  VALUES (?,?,?,?,?)',
        skilluses);
    return results;
  }

  /// Deletes SkillUse

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete SkillUse invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnSkillUse
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnSkillUse.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [SkillUse] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  SkillUseFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SkillUseFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  SkillUseFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return SkillUseFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion skilluse

// region SkillUseField
class SkillUseField extends FilterBase {
  SkillUseField(SkillUseFilterBuilder skilluseFB) : super(skilluseFB);

  @override
  SkillUseFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as SkillUseFilterBuilder;
  }

  @override
  SkillUseFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as SkillUseFilterBuilder;
  }

  @override
  SkillUseFilterBuilder isNull() {
    return super.isNull() as SkillUseFilterBuilder;
  }

  @override
  SkillUseFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as SkillUseFilterBuilder;
  }

  @override
  SkillUseFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as SkillUseFilterBuilder;
  }

  @override
  SkillUseFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as SkillUseFilterBuilder;
  }

  @override
  SkillUseFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as SkillUseFilterBuilder;
  }

  @override
  SkillUseFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as SkillUseFilterBuilder;
  }

  @override
  SkillUseFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as SkillUseFilterBuilder;
  }

  @override
  SkillUseFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as SkillUseFilterBuilder;
  }

  @override
  SkillUseFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as SkillUseFilterBuilder;
  }

  @override
  SkillUseFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as SkillUseFilterBuilder;
  }

  @override
  SkillUseField get not {
    return super.not as SkillUseField;
  }
}
// endregion SkillUseField

// region SkillUseFilterBuilder
class SkillUseFilterBuilder extends ConjunctionBase {
  SkillUseFilterBuilder(SkillUse obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnSkillUse = obj._mnSkillUse;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  SkillUseManager? _mnSkillUse;

  /// put the sql keyword 'AND'
  @override
  SkillUseFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  SkillUseFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  SkillUseFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  SkillUseFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  SkillUseFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  SkillUseFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  SkillUseFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SkillUseFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SkillUseFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  SkillUseFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  SkillUseFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  SkillUseField _setField(SkillUseField? field, String colName, DbType dbtype) {
    return SkillUseField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  SkillUseField? _id;
  SkillUseField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  SkillUseField? _SkillId;
  SkillUseField get SkillId {
    return _SkillId = _setField(_SkillId, 'SkillId', DbType.integer);
  }

  SkillUseField? _useDateTime;
  SkillUseField get useDateTime {
    return _useDateTime =
        _setField(_useDateTime, 'useDateTime', DbType.datetime);
  }

  SkillUseField? _MoodEntryId;
  SkillUseField get MoodEntryId {
    return _MoodEntryId =
        _setField(_MoodEntryId, 'MoodEntryId', DbType.integer);
  }

  SkillUseField? _EffectivenessId;
  SkillUseField get EffectivenessId {
    return _EffectivenessId =
        _setField(_EffectivenessId, 'EffectivenessId', DbType.integer);
  }

  /// Deletes List<SkillUse> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnSkillUse!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnSkillUse!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from SkillUse ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnSkillUse!.updateBatch(qparams, values);
  }

  /// This method always returns [SkillUse] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> SkillUse?
  @override
  Future<SkillUse?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnSkillUse!.toList(qparams);
    final data = await objFuture;
    SkillUse? obj;
    if (data.isNotEmpty) {
      obj = SkillUse.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plSkill'))) {
          obj.plSkill =
              obj.plSkill ?? await obj.getSkill(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plMoodEntry'))) {
          obj.plMoodEntry = obj.plMoodEntry ??
              await obj.getMoodEntry(loadParents: loadParents);
        }
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plEffectivenes'))) {
          obj.plEffectivenes = obj.plEffectivenes ??
              await obj.getEffectivenes(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [SkillUse]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> SkillUse?
  @override
  Future<SkillUse> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        SkillUse();
  }

  /// This method returns int. [SkillUse]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? skilluseCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final skillusesFuture = await _mnSkillUse!.toList(qparams);
    final int count = skillusesFuture[0]['CNT'] as int;
    if (skilluseCount != null) {
      skilluseCount(count);
    }
    return count;
  }

  /// This method returns List<SkillUse> [SkillUse]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<SkillUse>
  @override
  Future<List<SkillUse>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<SkillUse> skillusesData = await SkillUse.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return skillusesData;
  }

  /// This method returns Json String [SkillUse]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [SkillUse]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [SkillUse]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnSkillUse!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [SkillUse]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM SkillUse WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnSkillUse!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [SkillUse]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnSkillUse!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await SkillUse.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnSkillUse!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion SkillUseFilterBuilder

// region SkillUseFields
class SkillUseFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fSkillId;
  static TableField get SkillId {
    return _fSkillId =
        _fSkillId ?? SqlSyntax.setField(_fSkillId, 'SkillId', DbType.integer);
  }

  static TableField? _fUseDateTime;
  static TableField get useDateTime {
    return _fUseDateTime = _fUseDateTime ??
        SqlSyntax.setField(_fUseDateTime, 'useDateTime', DbType.datetime);
  }

  static TableField? _fMoodEntryId;
  static TableField get MoodEntryId {
    return _fMoodEntryId = _fMoodEntryId ??
        SqlSyntax.setField(_fMoodEntryId, 'MoodEntryId', DbType.integer);
  }

  static TableField? _fEffectivenessId;
  static TableField get EffectivenessId {
    return _fEffectivenessId = _fEffectivenessId ??
        SqlSyntax.setField(
            _fEffectivenessId, 'EffectivenessId', DbType.integer);
  }
}
// endregion SkillUseFields

//region SkillUseManager
class SkillUseManager extends SqfEntityProvider {
  SkillUseManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'SkillUse';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion SkillUseManager
// region Effectivenes
class Effectivenes extends TableBase {
  Effectivenes({this.id, this.description}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Effectivenes.withFields(this.id, this.description) {
    _setDefaultValues();
  }
  Effectivenes.withId(this.id, this.description) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Effectivenes.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['description'] != null) {
      description = o['description'].toString();
    }

    isSaved = true;
  }
  // FIELDS (Effectivenes)
  int? id;
  String? description;
  bool? isSaved;
  // end FIELDS (Effectivenes)

// COLLECTIONS & VIRTUALS (Effectivenes)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSkillUses', 'plField2'..]) or so on..
  List<SkillUse>? plSkillUses;

  /// get SkillUse(s) filtered by id=EffectivenessId
  SkillUseFilterBuilder? getSkillUses(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return SkillUse()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .EffectivenessId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Effectivenes)

  static const bool _softDeleteActivated = false;
  EffectivenesManager? __mnEffectivenes;

  EffectivenesManager get _mnEffectivenes {
    return __mnEffectivenes = __mnEffectivenes ?? EffectivenesManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (description != null || !forView) {
      map['description'] = description;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (description != null || !forView) {
      map['description'] = description;
    }

// COLLECTIONS (Effectivenes)
    if (!forQuery) {
      map['SkillUses'] = await getSkillUses()!.toMapList();
    }
// END COLLECTIONS (Effectivenes)

    return map;
  }

  /// This method returns Json String [Effectivenes]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Effectivenes]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [id, description];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, description];
  }

  static Future<List<Effectivenes>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Effectivenes.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Effectivenes>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Effectivenes>[];
    try {
      objList = list
          .map((effectivenes) =>
              Effectivenes.fromMap(effectivenes as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Effectivenes.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Effectivenes>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Effectivenes> objList = <Effectivenes>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Effectivenes.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('Effectiveness.plSkillUses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSkillUses'))) {
          /*_loadedfields!.add('Effectiveness.plSkillUses'); */ obj
                  .plSkillUses =
              obj.plSkillUses ??
                  await obj.getSkillUses()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Effectivenes by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Effectivenes] if exist, otherwise returns null
  Future<Effectivenes?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Effectivenes? obj;
    final data = await _mnEffectivenes.getById([id]);
    if (data.length != 0) {
      obj = Effectivenes.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('Effectiveness.plSkillUses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSkillUses'))) {
          /*_loadedfields!.add('Effectiveness.plSkillUses'); */ obj
                  .plSkillUses =
              obj.plSkillUses ??
                  await obj.getSkillUses()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Effectivenes) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnEffectivenes.insert(this, ignoreBatch);
      if (saveResult!.success) {
        isSaved = true;
      }
    } else {
      await _mnEffectivenes.update(this);
    }

    return id;
  }

  /// Saves the (Effectivenes) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0 || !isSaved!) {
      await _mnEffectivenes.insertOrThrow(this, ignoreBatch);
      if (saveResult != null && saveResult!.success) {
        isSaved = true;
      }
      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnEffectivenes.updateOrThrow(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Effectivenes> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<Effectivenes> effectiveneses) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in effectiveneses) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit();
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnEffectivenes.rawInsert(
          'INSERT OR REPLACE INTO Effectiveness (id, description)  VALUES (?,?)',
          [id, description],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Effectivenes id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Effectivenes id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Effectivenes Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Effectivenes>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Effectivenes> effectiveneses) async {
    final results = await _mnEffectivenes.rawInsertAll(
        'INSERT OR REPLACE INTO Effectiveness (id, description)  VALUES (?,?)',
        effectiveneses);
    return results;
  }

  /// Deletes Effectivenes

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Effectivenes invoked (id=$id)');
    if (await SkillUse().select().EffectivenessId.equals(id).and.toCount() >
        0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (SkillUse.EffectivenessId)');
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnEffectivenes
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnEffectivenes.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Effectivenes] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  EffectivenesFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return EffectivenesFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  EffectivenesFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return EffectivenesFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion effectivenes

// region EffectivenesField
class EffectivenesField extends FilterBase {
  EffectivenesField(EffectivenesFilterBuilder effectivenesFB)
      : super(effectivenesFB);

  @override
  EffectivenesFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as EffectivenesFilterBuilder;
  }

  @override
  EffectivenesFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as EffectivenesFilterBuilder;
  }

  @override
  EffectivenesFilterBuilder isNull() {
    return super.isNull() as EffectivenesFilterBuilder;
  }

  @override
  EffectivenesFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as EffectivenesFilterBuilder;
  }

  @override
  EffectivenesFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as EffectivenesFilterBuilder;
  }

  @override
  EffectivenesFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as EffectivenesFilterBuilder;
  }

  @override
  EffectivenesFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as EffectivenesFilterBuilder;
  }

  @override
  EffectivenesFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as EffectivenesFilterBuilder;
  }

  @override
  EffectivenesFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as EffectivenesFilterBuilder;
  }

  @override
  EffectivenesFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as EffectivenesFilterBuilder;
  }

  @override
  EffectivenesFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as EffectivenesFilterBuilder;
  }

  @override
  EffectivenesFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as EffectivenesFilterBuilder;
  }

  @override
  EffectivenesField get not {
    return super.not as EffectivenesField;
  }
}
// endregion EffectivenesField

// region EffectivenesFilterBuilder
class EffectivenesFilterBuilder extends ConjunctionBase {
  EffectivenesFilterBuilder(Effectivenes obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnEffectivenes = obj._mnEffectivenes;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  EffectivenesManager? _mnEffectivenes;

  /// put the sql keyword 'AND'
  @override
  EffectivenesFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  EffectivenesFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  EffectivenesFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  EffectivenesFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  EffectivenesFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  EffectivenesFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  EffectivenesFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  EffectivenesFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  EffectivenesFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  EffectivenesFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  EffectivenesFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  EffectivenesField _setField(
      EffectivenesField? field, String colName, DbType dbtype) {
    return EffectivenesField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  EffectivenesField? _id;
  EffectivenesField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  EffectivenesField? _description;
  EffectivenesField get description {
    return _description = _setField(_description, 'description', DbType.text);
  }

  /// Deletes List<Effectivenes> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Check sub records where in (SkillUse) according to DeleteRule.NO_ACTION

    final idListSkillUseBYEffectivenessId = toListPrimaryKeySQL(false);
    final resSkillUseBYEffectivenessId = await SkillUse()
        .select()
        .where('EffectivenessId IN (${idListSkillUseBYEffectivenessId['sql']})',
            parameterValue: idListSkillUseBYEffectivenessId['args'])
        .toCount();
    if (resSkillUseBYEffectivenessId > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (SkillUse.EffectivenessId)');
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnEffectivenes!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnEffectivenes!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from Effectiveness ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnEffectivenes!.updateBatch(qparams, values);
  }

  /// This method always returns [Effectivenes] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Effectivenes?
  @override
  Future<Effectivenes?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnEffectivenes!.toList(qparams);
    final data = await objFuture;
    Effectivenes? obj;
    if (data.isNotEmpty) {
      obj = Effectivenes.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('Effectiveness.plSkillUses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSkillUses'))) {
          /*_loadedfields!.add('Effectiveness.plSkillUses'); */ obj
                  .plSkillUses =
              obj.plSkillUses ??
                  await obj.getSkillUses()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Effectivenes]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Effectivenes?
  @override
  Future<Effectivenes> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Effectivenes();
  }

  /// This method returns int. [Effectivenes]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? effectivenesCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final effectivenesesFuture = await _mnEffectivenes!.toList(qparams);
    final int count = effectivenesesFuture[0]['CNT'] as int;
    if (effectivenesCount != null) {
      effectivenesCount(count);
    }
    return count;
  }

  /// This method returns List<Effectivenes> [Effectivenes]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Effectivenes>
  @override
  Future<List<Effectivenes>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Effectivenes> effectivenesesData =
        await Effectivenes.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return effectivenesesData;
  }

  /// This method returns Json String [Effectivenes]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Effectivenes]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Effectivenes]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnEffectivenes!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Effectivenes]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM Effectiveness WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnEffectivenes!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Effectivenes]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnEffectivenes!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Effectivenes.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnEffectivenes!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion EffectivenesFilterBuilder

// region EffectivenesFields
class EffectivenesFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }
}
// endregion EffectivenesFields

//region EffectivenesManager
class EffectivenesManager extends SqfEntityProvider {
  EffectivenesManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'Effectiveness';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion EffectivenesManager
// region MoodDiaryEntry
class MoodDiaryEntry extends TableBase {
  MoodDiaryEntry(
      {this.id,
      this.activity,
      this.mood,
      this.thoughts,
      this.rating,
      this.dateTime}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  MoodDiaryEntry.withFields(
      this.activity, this.mood, this.thoughts, this.rating, this.dateTime) {
    _setDefaultValues();
  }
  MoodDiaryEntry.withId(this.id, this.activity, this.mood, this.thoughts,
      this.rating, this.dateTime) {
    _setDefaultValues();
  }
  // fromMap v2.0
  MoodDiaryEntry.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['activity'] != null) {
      activity = o['activity'].toString();
    }
    if (o['mood'] != null) {
      mood = o['mood'].toString();
    }
    if (o['thoughts'] != null) {
      thoughts = o['thoughts'].toString();
    }
    if (o['rating'] != null) {
      rating = int.tryParse(o['rating'].toString());
    }
    if (o['dateTime'] != null) {
      dateTime = int.tryParse(o['dateTime'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateTime'].toString())!)
          : DateTime.tryParse(o['dateTime'].toString());
    }
  }
  // FIELDS (MoodDiaryEntry)
  int? id;
  String? activity;
  String? mood;
  String? thoughts;
  int? rating;
  DateTime? dateTime;

  // end FIELDS (MoodDiaryEntry)

  static const bool _softDeleteActivated = false;
  MoodDiaryEntryManager? __mnMoodDiaryEntry;

  MoodDiaryEntryManager get _mnMoodDiaryEntry {
    return __mnMoodDiaryEntry = __mnMoodDiaryEntry ?? MoodDiaryEntryManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (activity != null || !forView) {
      map['activity'] = activity;
    }
    if (mood != null || !forView) {
      map['mood'] = mood;
    }
    if (thoughts != null || !forView) {
      map['thoughts'] = thoughts;
    }
    if (rating != null || !forView) {
      map['rating'] = rating;
    }
    if (dateTime != null) {
      map['dateTime'] = forJson
          ? dateTime!.toString()
          : forQuery
              ? dateTime!.millisecondsSinceEpoch
              : dateTime;
    } else if (dateTime != null || !forView) {
      map['dateTime'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (activity != null || !forView) {
      map['activity'] = activity;
    }
    if (mood != null || !forView) {
      map['mood'] = mood;
    }
    if (thoughts != null || !forView) {
      map['thoughts'] = thoughts;
    }
    if (rating != null || !forView) {
      map['rating'] = rating;
    }
    if (dateTime != null) {
      map['dateTime'] = forJson
          ? dateTime!.toString()
          : forQuery
              ? dateTime!.millisecondsSinceEpoch
              : dateTime;
    } else if (dateTime != null || !forView) {
      map['dateTime'] = null;
    }

    return map;
  }

  /// This method returns Json String [MoodDiaryEntry]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [MoodDiaryEntry]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      activity,
      mood,
      thoughts,
      rating,
      dateTime != null ? dateTime!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      activity,
      mood,
      thoughts,
      rating,
      dateTime != null ? dateTime!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<MoodDiaryEntry>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR MoodDiaryEntry.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<MoodDiaryEntry>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <MoodDiaryEntry>[];
    try {
      objList = list
          .map((mooddiaryentry) =>
              MoodDiaryEntry.fromMap(mooddiaryentry as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR MoodDiaryEntry.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<MoodDiaryEntry>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<MoodDiaryEntry> objList = <MoodDiaryEntry>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = MoodDiaryEntry.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns MoodDiaryEntry by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [MoodDiaryEntry] if exist, otherwise returns null
  Future<MoodDiaryEntry?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    MoodDiaryEntry? obj;
    final data = await _mnMoodDiaryEntry.getById([id]);
    if (data.length != 0) {
      obj = MoodDiaryEntry.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (MoodDiaryEntry) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnMoodDiaryEntry.insert(this, ignoreBatch);
    } else {
      await _mnMoodDiaryEntry.update(this);
    }

    return id;
  }

  /// Saves the (MoodDiaryEntry) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnMoodDiaryEntry.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnMoodDiaryEntry.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs MoodDiaryEntry. Returns a new Primary Key value of MoodDiaryEntry

  /// <returns>Returns a new Primary Key value of MoodDiaryEntry
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<MoodDiaryEntry> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<MoodDiaryEntry> mooddiaryentries) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in mooddiaryentries) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit();
      for (int i = 0; i < mooddiaryentries.length; i++) {
        if (mooddiaryentries[i].id == null) {
          mooddiaryentries[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnMoodDiaryEntry.rawInsert(
          'INSERT OR REPLACE INTO MoodDiaryEntry (id, activity, mood, thoughts, rating, dateTime)  VALUES (?,?,?,?,?,?)',
          [
            id,
            activity,
            mood,
            thoughts,
            rating,
            dateTime != null ? dateTime!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'MoodDiaryEntry id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'MoodDiaryEntry id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'MoodDiaryEntry Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<MoodDiaryEntry>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(
      List<MoodDiaryEntry> mooddiaryentries) async {
    final results = await _mnMoodDiaryEntry.rawInsertAll(
        'INSERT OR REPLACE INTO MoodDiaryEntry (id, activity, mood, thoughts, rating, dateTime)  VALUES (?,?,?,?,?,?)',
        mooddiaryentries);
    return results;
  }

  /// Deletes MoodDiaryEntry

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete MoodDiaryEntry invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnMoodDiaryEntry
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnMoodDiaryEntry.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [MoodDiaryEntry] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  MoodDiaryEntryFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MoodDiaryEntryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  MoodDiaryEntryFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MoodDiaryEntryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion mooddiaryentry

// region MoodDiaryEntryField
class MoodDiaryEntryField extends FilterBase {
  MoodDiaryEntryField(MoodDiaryEntryFilterBuilder mooddiaryentryFB)
      : super(mooddiaryentryFB);

  @override
  MoodDiaryEntryFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as MoodDiaryEntryFilterBuilder;
  }

  @override
  MoodDiaryEntryFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as MoodDiaryEntryFilterBuilder;
  }

  @override
  MoodDiaryEntryFilterBuilder isNull() {
    return super.isNull() as MoodDiaryEntryFilterBuilder;
  }

  @override
  MoodDiaryEntryFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as MoodDiaryEntryFilterBuilder;
  }

  @override
  MoodDiaryEntryFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as MoodDiaryEntryFilterBuilder;
  }

  @override
  MoodDiaryEntryFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as MoodDiaryEntryFilterBuilder;
  }

  @override
  MoodDiaryEntryFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as MoodDiaryEntryFilterBuilder;
  }

  @override
  MoodDiaryEntryFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as MoodDiaryEntryFilterBuilder;
  }

  @override
  MoodDiaryEntryFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as MoodDiaryEntryFilterBuilder;
  }

  @override
  MoodDiaryEntryFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as MoodDiaryEntryFilterBuilder;
  }

  @override
  MoodDiaryEntryFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as MoodDiaryEntryFilterBuilder;
  }

  @override
  MoodDiaryEntryFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as MoodDiaryEntryFilterBuilder;
  }

  @override
  MoodDiaryEntryField get not {
    return super.not as MoodDiaryEntryField;
  }
}
// endregion MoodDiaryEntryField

// region MoodDiaryEntryFilterBuilder
class MoodDiaryEntryFilterBuilder extends ConjunctionBase {
  MoodDiaryEntryFilterBuilder(MoodDiaryEntry obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnMoodDiaryEntry = obj._mnMoodDiaryEntry;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  MoodDiaryEntryManager? _mnMoodDiaryEntry;

  /// put the sql keyword 'AND'
  @override
  MoodDiaryEntryFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  MoodDiaryEntryFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  MoodDiaryEntryFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  MoodDiaryEntryFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  MoodDiaryEntryFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  MoodDiaryEntryFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  MoodDiaryEntryFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MoodDiaryEntryFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MoodDiaryEntryFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MoodDiaryEntryFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MoodDiaryEntryFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  MoodDiaryEntryField _setField(
      MoodDiaryEntryField? field, String colName, DbType dbtype) {
    return MoodDiaryEntryField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  MoodDiaryEntryField? _id;
  MoodDiaryEntryField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  MoodDiaryEntryField? _activity;
  MoodDiaryEntryField get activity {
    return _activity = _setField(_activity, 'activity', DbType.text);
  }

  MoodDiaryEntryField? _mood;
  MoodDiaryEntryField get mood {
    return _mood = _setField(_mood, 'mood', DbType.text);
  }

  MoodDiaryEntryField? _thoughts;
  MoodDiaryEntryField get thoughts {
    return _thoughts = _setField(_thoughts, 'thoughts', DbType.text);
  }

  MoodDiaryEntryField? _rating;
  MoodDiaryEntryField get rating {
    return _rating = _setField(_rating, 'rating', DbType.integer);
  }

  MoodDiaryEntryField? _dateTime;
  MoodDiaryEntryField get dateTime {
    return _dateTime = _setField(_dateTime, 'dateTime', DbType.datetime);
  }

  /// Deletes List<MoodDiaryEntry> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnMoodDiaryEntry!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnMoodDiaryEntry!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from MoodDiaryEntry ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnMoodDiaryEntry!.updateBatch(qparams, values);
  }

  /// This method always returns [MoodDiaryEntry] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> MoodDiaryEntry?
  @override
  Future<MoodDiaryEntry?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnMoodDiaryEntry!.toList(qparams);
    final data = await objFuture;
    MoodDiaryEntry? obj;
    if (data.isNotEmpty) {
      obj = MoodDiaryEntry.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [MoodDiaryEntry]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> MoodDiaryEntry?
  @override
  Future<MoodDiaryEntry> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        MoodDiaryEntry();
  }

  /// This method returns int. [MoodDiaryEntry]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? mooddiaryentryCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final mooddiaryentriesFuture = await _mnMoodDiaryEntry!.toList(qparams);
    final int count = mooddiaryentriesFuture[0]['CNT'] as int;
    if (mooddiaryentryCount != null) {
      mooddiaryentryCount(count);
    }
    return count;
  }

  /// This method returns List<MoodDiaryEntry> [MoodDiaryEntry]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<MoodDiaryEntry>
  @override
  Future<List<MoodDiaryEntry>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<MoodDiaryEntry> mooddiaryentriesData =
        await MoodDiaryEntry.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return mooddiaryentriesData;
  }

  /// This method returns Json String [MoodDiaryEntry]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [MoodDiaryEntry]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [MoodDiaryEntry]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnMoodDiaryEntry!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [MoodDiaryEntry]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM MoodDiaryEntry WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnMoodDiaryEntry!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [MoodDiaryEntry]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnMoodDiaryEntry!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await MoodDiaryEntry.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnMoodDiaryEntry!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion MoodDiaryEntryFilterBuilder

// region MoodDiaryEntryFields
class MoodDiaryEntryFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fActivity;
  static TableField get activity {
    return _fActivity =
        _fActivity ?? SqlSyntax.setField(_fActivity, 'activity', DbType.text);
  }

  static TableField? _fMood;
  static TableField get mood {
    return _fMood = _fMood ?? SqlSyntax.setField(_fMood, 'mood', DbType.text);
  }

  static TableField? _fThoughts;
  static TableField get thoughts {
    return _fThoughts =
        _fThoughts ?? SqlSyntax.setField(_fThoughts, 'thoughts', DbType.text);
  }

  static TableField? _fRating;
  static TableField get rating {
    return _fRating =
        _fRating ?? SqlSyntax.setField(_fRating, 'rating', DbType.integer);
  }

  static TableField? _fDateTime;
  static TableField get dateTime {
    return _fDateTime = _fDateTime ??
        SqlSyntax.setField(_fDateTime, 'dateTime', DbType.datetime);
  }
}
// endregion MoodDiaryEntryFields

//region MoodDiaryEntryManager
class MoodDiaryEntryManager extends SqfEntityProvider {
  MoodDiaryEntryManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'MoodDiaryEntry';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion MoodDiaryEntryManager
// region MoodEntry
class MoodEntry extends TableBase {
  MoodEntry(
      {this.id, this.stresslevel, this.mood, this.dateTime, this.activity}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  MoodEntry.withFields(
      this.stresslevel, this.mood, this.dateTime, this.activity) {
    _setDefaultValues();
  }
  MoodEntry.withId(
      this.id, this.stresslevel, this.mood, this.dateTime, this.activity) {
    _setDefaultValues();
  }
  // fromMap v2.0
  MoodEntry.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['stresslevel'] != null) {
      stresslevel = int.tryParse(o['stresslevel'].toString());
    }
    if (o['mood'] != null) {
      mood = int.tryParse(o['mood'].toString());
    }
    if (o['dateTime'] != null) {
      dateTime = int.tryParse(o['dateTime'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['dateTime'].toString())!)
          : DateTime.tryParse(o['dateTime'].toString());
    }
    if (o['activity'] != null) {
      activity = o['activity'].toString();
    }
  }
  // FIELDS (MoodEntry)
  int? id;
  int? stresslevel;
  int? mood;
  DateTime? dateTime;
  String? activity;

  // end FIELDS (MoodEntry)

// COLLECTIONS & VIRTUALS (MoodEntry)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plSkillUses', 'plField2'..]) or so on..
  List<SkillUse>? plSkillUses;

  /// get SkillUse(s) filtered by id=MoodEntryId
  SkillUseFilterBuilder? getSkillUses(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return SkillUse()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .MoodEntryId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (MoodEntry)

  static const bool _softDeleteActivated = false;
  MoodEntryManager? __mnMoodEntry;

  MoodEntryManager get _mnMoodEntry {
    return __mnMoodEntry = __mnMoodEntry ?? MoodEntryManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (stresslevel != null || !forView) {
      map['stresslevel'] = stresslevel;
    }
    if (mood != null || !forView) {
      map['mood'] = mood;
    }
    if (dateTime != null) {
      map['dateTime'] = forJson
          ? dateTime!.toString()
          : forQuery
              ? dateTime!.millisecondsSinceEpoch
              : dateTime;
    } else if (dateTime != null || !forView) {
      map['dateTime'] = null;
    }
    if (activity != null || !forView) {
      map['activity'] = activity;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (stresslevel != null || !forView) {
      map['stresslevel'] = stresslevel;
    }
    if (mood != null || !forView) {
      map['mood'] = mood;
    }
    if (dateTime != null) {
      map['dateTime'] = forJson
          ? dateTime!.toString()
          : forQuery
              ? dateTime!.millisecondsSinceEpoch
              : dateTime;
    } else if (dateTime != null || !forView) {
      map['dateTime'] = null;
    }
    if (activity != null || !forView) {
      map['activity'] = activity;
    }

// COLLECTIONS (MoodEntry)
    if (!forQuery) {
      map['SkillUses'] = await getSkillUses()!.toMapList();
    }
// END COLLECTIONS (MoodEntry)

    return map;
  }

  /// This method returns Json String [MoodEntry]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [MoodEntry]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      stresslevel,
      mood,
      dateTime != null ? dateTime!.millisecondsSinceEpoch : null,
      activity
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      stresslevel,
      mood,
      dateTime != null ? dateTime!.millisecondsSinceEpoch : null,
      activity
    ];
  }

  static Future<List<MoodEntry>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR MoodEntry.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<MoodEntry>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <MoodEntry>[];
    try {
      objList = list
          .map((moodentry) =>
              MoodEntry.fromMap(moodentry as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR MoodEntry.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<MoodEntry>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<MoodEntry> objList = <MoodEntry>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = MoodEntry.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('MoodEntry.plSkillUses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSkillUses'))) {
          /*_loadedfields!.add('MoodEntry.plSkillUses'); */ obj.plSkillUses =
              obj.plSkillUses ??
                  await obj.getSkillUses()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns MoodEntry by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [MoodEntry] if exist, otherwise returns null
  Future<MoodEntry?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    MoodEntry? obj;
    final data = await _mnMoodEntry.getById([id]);
    if (data.length != 0) {
      obj = MoodEntry.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('MoodEntry.plSkillUses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSkillUses'))) {
          /*_loadedfields!.add('MoodEntry.plSkillUses'); */ obj.plSkillUses =
              obj.plSkillUses ??
                  await obj.getSkillUses()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (MoodEntry) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnMoodEntry.insert(this, ignoreBatch);
    } else {
      await _mnMoodEntry.update(this);
    }

    return id;
  }

  /// Saves the (MoodEntry) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnMoodEntry.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnMoodEntry.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs MoodEntry. Returns a new Primary Key value of MoodEntry

  /// <returns>Returns a new Primary Key value of MoodEntry
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<MoodEntry> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<MoodEntry> moodentries) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in moodentries) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit();
      for (int i = 0; i < moodentries.length; i++) {
        if (moodentries[i].id == null) {
          moodentries[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnMoodEntry.rawInsert(
          'INSERT OR REPLACE INTO MoodEntry (id, stresslevel, mood, dateTime, activity)  VALUES (?,?,?,?,?)',
          [
            id,
            stresslevel,
            mood,
            dateTime != null ? dateTime!.millisecondsSinceEpoch : null,
            activity
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'MoodEntry id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'MoodEntry id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'MoodEntry Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<MoodEntry>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<MoodEntry> moodentries) async {
    final results = await _mnMoodEntry.rawInsertAll(
        'INSERT OR REPLACE INTO MoodEntry (id, stresslevel, mood, dateTime, activity)  VALUES (?,?,?,?,?)',
        moodentries);
    return results;
  }

  /// Deletes MoodEntry

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete MoodEntry invoked (id=$id)');
    if (await SkillUse().select().MoodEntryId.equals(id).and.toCount() > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (SkillUse.MoodEntryId)');
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnMoodEntry
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnMoodEntry.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [MoodEntry] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  MoodEntryFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MoodEntryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  MoodEntryFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MoodEntryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion moodentry

// region MoodEntryField
class MoodEntryField extends FilterBase {
  MoodEntryField(MoodEntryFilterBuilder moodentryFB) : super(moodentryFB);

  @override
  MoodEntryFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as MoodEntryFilterBuilder;
  }

  @override
  MoodEntryFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as MoodEntryFilterBuilder;
  }

  @override
  MoodEntryFilterBuilder isNull() {
    return super.isNull() as MoodEntryFilterBuilder;
  }

  @override
  MoodEntryFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as MoodEntryFilterBuilder;
  }

  @override
  MoodEntryFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as MoodEntryFilterBuilder;
  }

  @override
  MoodEntryFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as MoodEntryFilterBuilder;
  }

  @override
  MoodEntryFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as MoodEntryFilterBuilder;
  }

  @override
  MoodEntryFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as MoodEntryFilterBuilder;
  }

  @override
  MoodEntryFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as MoodEntryFilterBuilder;
  }

  @override
  MoodEntryFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as MoodEntryFilterBuilder;
  }

  @override
  MoodEntryFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as MoodEntryFilterBuilder;
  }

  @override
  MoodEntryFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as MoodEntryFilterBuilder;
  }

  @override
  MoodEntryField get not {
    return super.not as MoodEntryField;
  }
}
// endregion MoodEntryField

// region MoodEntryFilterBuilder
class MoodEntryFilterBuilder extends ConjunctionBase {
  MoodEntryFilterBuilder(MoodEntry obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnMoodEntry = obj._mnMoodEntry;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  MoodEntryManager? _mnMoodEntry;

  /// put the sql keyword 'AND'
  @override
  MoodEntryFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  MoodEntryFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  MoodEntryFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  MoodEntryFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  MoodEntryFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  MoodEntryFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  MoodEntryFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MoodEntryFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MoodEntryFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MoodEntryFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MoodEntryFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  MoodEntryField _setField(
      MoodEntryField? field, String colName, DbType dbtype) {
    return MoodEntryField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  MoodEntryField? _id;
  MoodEntryField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  MoodEntryField? _stresslevel;
  MoodEntryField get stresslevel {
    return _stresslevel =
        _setField(_stresslevel, 'stresslevel', DbType.integer);
  }

  MoodEntryField? _mood;
  MoodEntryField get mood {
    return _mood = _setField(_mood, 'mood', DbType.integer);
  }

  MoodEntryField? _dateTime;
  MoodEntryField get dateTime {
    return _dateTime = _setField(_dateTime, 'dateTime', DbType.datetime);
  }

  MoodEntryField? _activity;
  MoodEntryField get activity {
    return _activity = _setField(_activity, 'activity', DbType.text);
  }

  /// Deletes List<MoodEntry> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Check sub records where in (SkillUse) according to DeleteRule.NO_ACTION

    final idListSkillUseBYMoodEntryId = toListPrimaryKeySQL(false);
    final resSkillUseBYMoodEntryId = await SkillUse()
        .select()
        .where('MoodEntryId IN (${idListSkillUseBYMoodEntryId['sql']})',
            parameterValue: idListSkillUseBYMoodEntryId['args'])
        .toCount();
    if (resSkillUseBYMoodEntryId > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (SkillUse.MoodEntryId)');
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnMoodEntry!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnMoodEntry!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from MoodEntry ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnMoodEntry!.updateBatch(qparams, values);
  }

  /// This method always returns [MoodEntry] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> MoodEntry?
  @override
  Future<MoodEntry?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnMoodEntry!.toList(qparams);
    final data = await objFuture;
    MoodEntry? obj;
    if (data.isNotEmpty) {
      obj = MoodEntry.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('MoodEntry.plSkillUses') && */ (preloadFields ==
                null ||
            preloadFields.contains('plSkillUses'))) {
          /*_loadedfields!.add('MoodEntry.plSkillUses'); */ obj.plSkillUses =
              obj.plSkillUses ??
                  await obj.getSkillUses()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [MoodEntry]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> MoodEntry?
  @override
  Future<MoodEntry> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        MoodEntry();
  }

  /// This method returns int. [MoodEntry]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? moodentryCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final moodentriesFuture = await _mnMoodEntry!.toList(qparams);
    final int count = moodentriesFuture[0]['CNT'] as int;
    if (moodentryCount != null) {
      moodentryCount(count);
    }
    return count;
  }

  /// This method returns List<MoodEntry> [MoodEntry]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<MoodEntry>
  @override
  Future<List<MoodEntry>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<MoodEntry> moodentriesData = await MoodEntry.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return moodentriesData;
  }

  /// This method returns Json String [MoodEntry]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [MoodEntry]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [MoodEntry]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnMoodEntry!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [MoodEntry]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM MoodEntry WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnMoodEntry!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [MoodEntry]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnMoodEntry!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await MoodEntry.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnMoodEntry!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion MoodEntryFilterBuilder

// region MoodEntryFields
class MoodEntryFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fStresslevel;
  static TableField get stresslevel {
    return _fStresslevel = _fStresslevel ??
        SqlSyntax.setField(_fStresslevel, 'stresslevel', DbType.integer);
  }

  static TableField? _fMood;
  static TableField get mood {
    return _fMood =
        _fMood ?? SqlSyntax.setField(_fMood, 'mood', DbType.integer);
  }

  static TableField? _fDateTime;
  static TableField get dateTime {
    return _fDateTime = _fDateTime ??
        SqlSyntax.setField(_fDateTime, 'dateTime', DbType.datetime);
  }

  static TableField? _fActivity;
  static TableField get activity {
    return _fActivity =
        _fActivity ?? SqlSyntax.setField(_fActivity, 'activity', DbType.text);
  }
}
// endregion MoodEntryFields

//region MoodEntryManager
class MoodEntryManager extends SqfEntityProvider {
  MoodEntryManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'MoodEntry';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion MoodEntryManager
// region MoodWithDiaryEntry
class MoodWithDiaryEntry extends TableBase {
  MoodWithDiaryEntry({this.id, this.moodId, this.diaryId}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  MoodWithDiaryEntry.withFields(this.moodId, this.diaryId) {
    _setDefaultValues();
  }
  MoodWithDiaryEntry.withId(this.id, this.moodId, this.diaryId) {
    _setDefaultValues();
  }
  // fromMap v2.0
  MoodWithDiaryEntry.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['moodId'] != null) {
      moodId = int.tryParse(o['moodId'].toString());
    }
    if (o['diaryId'] != null) {
      diaryId = int.tryParse(o['diaryId'].toString());
    }
  }
  // FIELDS (MoodWithDiaryEntry)
  int? id;
  int? moodId;
  int? diaryId;

  // end FIELDS (MoodWithDiaryEntry)

  static const bool _softDeleteActivated = false;
  MoodWithDiaryEntryManager? __mnMoodWithDiaryEntry;

  MoodWithDiaryEntryManager get _mnMoodWithDiaryEntry {
    return __mnMoodWithDiaryEntry =
        __mnMoodWithDiaryEntry ?? MoodWithDiaryEntryManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (moodId != null || !forView) {
      map['moodId'] = moodId;
    }
    if (diaryId != null || !forView) {
      map['diaryId'] = diaryId;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (moodId != null || !forView) {
      map['moodId'] = moodId;
    }
    if (diaryId != null || !forView) {
      map['diaryId'] = diaryId;
    }

    return map;
  }

  /// This method returns Json String [MoodWithDiaryEntry]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [MoodWithDiaryEntry]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [moodId, diaryId];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, moodId, diaryId];
  }

  static Future<List<MoodWithDiaryEntry>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR MoodWithDiaryEntry.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<MoodWithDiaryEntry>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <MoodWithDiaryEntry>[];
    try {
      objList = list
          .map((moodwithdiaryentry) => MoodWithDiaryEntry.fromMap(
              moodwithdiaryentry as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR MoodWithDiaryEntry.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<MoodWithDiaryEntry>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<MoodWithDiaryEntry> objList = <MoodWithDiaryEntry>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = MoodWithDiaryEntry.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns MoodWithDiaryEntry by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [MoodWithDiaryEntry] if exist, otherwise returns null
  Future<MoodWithDiaryEntry?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    MoodWithDiaryEntry? obj;
    final data = await _mnMoodWithDiaryEntry.getById([id]);
    if (data.length != 0) {
      obj = MoodWithDiaryEntry.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (MoodWithDiaryEntry) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnMoodWithDiaryEntry.insert(this, ignoreBatch);
    } else {
      await _mnMoodWithDiaryEntry.update(this);
    }

    return id;
  }

  /// Saves the (MoodWithDiaryEntry) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnMoodWithDiaryEntry.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnMoodWithDiaryEntry.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs MoodWithDiaryEntry. Returns a new Primary Key value of MoodWithDiaryEntry

  /// <returns>Returns a new Primary Key value of MoodWithDiaryEntry
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<MoodWithDiaryEntry> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(
      List<MoodWithDiaryEntry> moodwithdiaryentries) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in moodwithdiaryentries) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit();
      for (int i = 0; i < moodwithdiaryentries.length; i++) {
        if (moodwithdiaryentries[i].id == null) {
          moodwithdiaryentries[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnMoodWithDiaryEntry.rawInsert(
          'INSERT OR REPLACE INTO MoodWithDiaryEntry (id, moodId, diaryId)  VALUES (?,?,?)',
          [id, moodId, diaryId],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'MoodWithDiaryEntry id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'MoodWithDiaryEntry id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage:
              'MoodWithDiaryEntry Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<MoodWithDiaryEntry>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(
      List<MoodWithDiaryEntry> moodwithdiaryentries) async {
    final results = await _mnMoodWithDiaryEntry.rawInsertAll(
        'INSERT OR REPLACE INTO MoodWithDiaryEntry (id, moodId, diaryId)  VALUES (?,?,?)',
        moodwithdiaryentries);
    return results;
  }

  /// Deletes MoodWithDiaryEntry

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete MoodWithDiaryEntry invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnMoodWithDiaryEntry
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnMoodWithDiaryEntry.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [MoodWithDiaryEntry] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  MoodWithDiaryEntryFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MoodWithDiaryEntryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  MoodWithDiaryEntryFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return MoodWithDiaryEntryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion moodwithdiaryentry

// region MoodWithDiaryEntryField
class MoodWithDiaryEntryField extends FilterBase {
  MoodWithDiaryEntryField(MoodWithDiaryEntryFilterBuilder moodwithdiaryentryFB)
      : super(moodwithdiaryentryFB);

  @override
  MoodWithDiaryEntryFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as MoodWithDiaryEntryFilterBuilder;
  }

  @override
  MoodWithDiaryEntryFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as MoodWithDiaryEntryFilterBuilder;
  }

  @override
  MoodWithDiaryEntryFilterBuilder isNull() {
    return super.isNull() as MoodWithDiaryEntryFilterBuilder;
  }

  @override
  MoodWithDiaryEntryFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as MoodWithDiaryEntryFilterBuilder;
  }

  @override
  MoodWithDiaryEntryFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as MoodWithDiaryEntryFilterBuilder;
  }

  @override
  MoodWithDiaryEntryFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as MoodWithDiaryEntryFilterBuilder;
  }

  @override
  MoodWithDiaryEntryFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as MoodWithDiaryEntryFilterBuilder;
  }

  @override
  MoodWithDiaryEntryFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as MoodWithDiaryEntryFilterBuilder;
  }

  @override
  MoodWithDiaryEntryFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as MoodWithDiaryEntryFilterBuilder;
  }

  @override
  MoodWithDiaryEntryFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as MoodWithDiaryEntryFilterBuilder;
  }

  @override
  MoodWithDiaryEntryFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as MoodWithDiaryEntryFilterBuilder;
  }

  @override
  MoodWithDiaryEntryFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as MoodWithDiaryEntryFilterBuilder;
  }

  @override
  MoodWithDiaryEntryField get not {
    return super.not as MoodWithDiaryEntryField;
  }
}
// endregion MoodWithDiaryEntryField

// region MoodWithDiaryEntryFilterBuilder
class MoodWithDiaryEntryFilterBuilder extends ConjunctionBase {
  MoodWithDiaryEntryFilterBuilder(MoodWithDiaryEntry obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnMoodWithDiaryEntry = obj._mnMoodWithDiaryEntry;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  MoodWithDiaryEntryManager? _mnMoodWithDiaryEntry;

  /// put the sql keyword 'AND'
  @override
  MoodWithDiaryEntryFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  MoodWithDiaryEntryFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  MoodWithDiaryEntryFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  MoodWithDiaryEntryFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  MoodWithDiaryEntryFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  MoodWithDiaryEntryFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  MoodWithDiaryEntryFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MoodWithDiaryEntryFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MoodWithDiaryEntryFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  MoodWithDiaryEntryFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  MoodWithDiaryEntryFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  MoodWithDiaryEntryField _setField(
      MoodWithDiaryEntryField? field, String colName, DbType dbtype) {
    return MoodWithDiaryEntryField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  MoodWithDiaryEntryField? _id;
  MoodWithDiaryEntryField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  MoodWithDiaryEntryField? _moodId;
  MoodWithDiaryEntryField get moodId {
    return _moodId = _setField(_moodId, 'moodId', DbType.integer);
  }

  MoodWithDiaryEntryField? _diaryId;
  MoodWithDiaryEntryField get diaryId {
    return _diaryId = _setField(_diaryId, 'diaryId', DbType.integer);
  }

  /// Deletes List<MoodWithDiaryEntry> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnMoodWithDiaryEntry!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnMoodWithDiaryEntry!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from MoodWithDiaryEntry ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnMoodWithDiaryEntry!.updateBatch(qparams, values);
  }

  /// This method always returns [MoodWithDiaryEntry] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> MoodWithDiaryEntry?
  @override
  Future<MoodWithDiaryEntry?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnMoodWithDiaryEntry!.toList(qparams);
    final data = await objFuture;
    MoodWithDiaryEntry? obj;
    if (data.isNotEmpty) {
      obj = MoodWithDiaryEntry.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [MoodWithDiaryEntry]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> MoodWithDiaryEntry?
  @override
  Future<MoodWithDiaryEntry> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        MoodWithDiaryEntry();
  }

  /// This method returns int. [MoodWithDiaryEntry]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? moodwithdiaryentryCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final moodwithdiaryentriesFuture =
        await _mnMoodWithDiaryEntry!.toList(qparams);
    final int count = moodwithdiaryentriesFuture[0]['CNT'] as int;
    if (moodwithdiaryentryCount != null) {
      moodwithdiaryentryCount(count);
    }
    return count;
  }

  /// This method returns List<MoodWithDiaryEntry> [MoodWithDiaryEntry]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<MoodWithDiaryEntry>
  @override
  Future<List<MoodWithDiaryEntry>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<MoodWithDiaryEntry> moodwithdiaryentriesData =
        await MoodWithDiaryEntry.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return moodwithdiaryentriesData;
  }

  /// This method returns Json String [MoodWithDiaryEntry]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [MoodWithDiaryEntry]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [MoodWithDiaryEntry]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnMoodWithDiaryEntry!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [MoodWithDiaryEntry]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM MoodWithDiaryEntry WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnMoodWithDiaryEntry!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [MoodWithDiaryEntry]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnMoodWithDiaryEntry!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await MoodWithDiaryEntry.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnMoodWithDiaryEntry!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion MoodWithDiaryEntryFilterBuilder

// region MoodWithDiaryEntryFields
class MoodWithDiaryEntryFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fMoodId;
  static TableField get moodId {
    return _fMoodId =
        _fMoodId ?? SqlSyntax.setField(_fMoodId, 'moodId', DbType.integer);
  }

  static TableField? _fDiaryId;
  static TableField get diaryId {
    return _fDiaryId =
        _fDiaryId ?? SqlSyntax.setField(_fDiaryId, 'diaryId', DbType.integer);
  }
}
// endregion MoodWithDiaryEntryFields

//region MoodWithDiaryEntryManager
class MoodWithDiaryEntryManager extends SqfEntityProvider {
  MoodWithDiaryEntryManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'MoodWithDiaryEntry';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion MoodWithDiaryEntryManager
class MyDbModelSequenceManager extends SqfEntityProvider {
  MyDbModelSequenceManager() : super(MyDbModel());
}
// END OF ENTITIES
